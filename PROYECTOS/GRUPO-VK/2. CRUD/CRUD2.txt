CREATE OR REPLACE PACKAGE PK_RESUMEN /*  */
IS

--SELECT
   PROCEDURE LISTAR_PASAJEROS;

--INSERT
   PROCEDURE NEW_PAS (
   P_DNI        VK.PASAJERO.DNI%TYPE,
   P_NOMBRE     VK.PASAJERO.NOMBRE%TYPE,
   P_APELLIDO   VK.PASAJERO.APELLIDO%TYPE,
   P_EDAD       VK.PASAJERO.EDAD%TYPE,
   P_SEXO       VK.PASAJERO.SEXO%TYPE,
   P_TELEFONO   VK.PASAJERO.TELEFONO%TYPE,
   P_CORREO     VK.PASAJERO.CORREO%TYPE,
   P_ID_VUELO   VK.PASAJERO.ID_VUELO%TYPE
);

--UPDATE
   PROCEDURE SP_ACTU_ASIENTO( 
   P_DNI VK.TICKET.DNI%TYPE, 
   P_NRO_ASIENTO VK.TICKET.NRO_ASIENTO%TYPE
);

--DELETE
   PROCEDURE SP_DEL_PAS( 
   P_ID_TICKET VK.TICKET.ID_TICKET%TYPE   
);

END PK_RESUMEN;
/


CREATE OR REPLACE PACKAGE BODY PK_RESUMEN /*   */
IS

   PROCEDURE LISTAR_PASAJEROS
IS
   CURSOR C1 IS SELECT * FROM VK.PASAJERO;
   REG VK.PASAJERO%ROWTYPE;
BEGIN
   OPEN C1;
   LOOP
      FETCH C1 INTO REG;
      EXIT WHEN C1%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(C1%ROWCOUNT || '.- ' || REG.NOMBRE || ' ' || REG.APELLIDO || ' -> ' || REG.DNI);
   END LOOP;
   CLOSE C1;
END;

---

   PROCEDURE   NEW_PAS (
   P_DNI        VK.PASAJERO.DNI%TYPE,
   P_NOMBRE     VK.PASAJERO.NOMBRE%TYPE,
   P_APELLIDO   VK.PASAJERO.APELLIDO%TYPE,
   P_EDAD       VK.PASAJERO.EDAD%TYPE,
   P_SEXO       VK.PASAJERO.SEXO%TYPE,
   P_TELEFONO   VK.PASAJERO.TELEFONO%TYPE,
   P_CORREO     VK.PASAJERO.CORREO%TYPE,
   P_ID_VUELO   VK.PASAJERO.ID_VUELO%TYPE
)
IS
   V_CONT NUMBER(3);
BEGIN
   SELECT COUNT(*) INTO V_CONT
   FROM VK.PASAJERO
   WHERE DNI = P_DNI;
   IF(V_CONT > 0) THEN
      RAISE_APPLICATION_ERROR(-20000, 'Ya se Encuentra Registrado');
   END IF;
   
   SELECT COUNT(*) INTO V_CONT
   FROM VK.VUELO
   WHERE ID_VUELO = P_ID_VUELO;
   IF(V_CONT = 0) THEN
      RAISE_APPLICATION_ERROR(-20000, 'El Vuelo NO Existe');
   END IF;
   
   INSERT INTO VK.PASAJERO(DNI, NOMBRE, APELLIDO, EDAD, SEXO, TELEFONO, CORREO, ID_VUELO)
   VALUES (P_DNI, P_NOMBRE, P_APELLIDO, P_EDAD, P_SEXO, P_TELEFONO, P_CORREO, P_ID_VUELO);
   COMMIT;
   DBMS_OUTPUT.PUT_LINE('Proceso OK.');

EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('CODIGO DE ERROR: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

---

   PROCEDURE SP_ACTU_ASIENTO( 
   P_DNI VK.TICKET.DNI%TYPE, 
   P_NRO_ASIENTO VK.TICKET.NRO_ASIENTO%TYPE)
IS
   V_CONT NUMBER(3);
   V_NRO_ASIENTO NUMBER(3);
   EXCEP1 EXCEPTION;
   EXCEP2 EXCEPTION;
BEGIN
   SELECT COUNT(*) INTO V_CONT
   FROM VK.TICKET
   WHERE DNI = P_DNI;
   IF (V_CONT = 0) THEN
      RAISE EXCEP1;
   END IF;
   
   IF (P_NRO_ASIENTO <= 0) THEN
      RAISE EXCEP2;
   END IF;
   
   SELECT NRO_ASIENTO INTO V_NRO_ASIENTO
   FROM VK.TICKET
   WHERE DNI = P_DNI;
   DBMS_OUTPUT.PUT_LINE('Nro de Asiento Anterior: ' || V_NRO_ASIENTO);
   
	UPDATE VK.TICKET 
	SET NRO_ASIENTO = P_NRO_ASIENTO
	WHERE DNI = P_DNI;
   COMMIT;
   DBMS_OUTPUT.PUT_LINE('Nro de Asiento Actual: ' || P_NRO_ASIENTO);
   
EXCEPTION
   WHEN EXCEP1 THEN
      DBMS_OUTPUT.PUT_LINE('El Pasajero NO Existe.');
   WHEN EXCEP2 THEN
      DBMS_OUTPUT.PUT_LINE('Error!, Nro de Asiento Equivocado');
END;

---

   PROCEDURE SP_DEL_PAS( 
   P_ID_TICKET VK.TICKET.ID_TICKET%TYPE)
IS
	V_CONT NUMBER(3);
BEGIN
	SELECT COUNT(*) INTO V_CONT 
   FROM VK.TICKET
   WHERE ID_TICKET = P_ID_TICKET;
	IF (V_CONT = 0) THEN
		RAISE_APPLICATION_ERROR(-20000, 'No Existe el ticket');
	END IF;

	DELETE FROM VK.TICKET WHERE ID_TICKET = P_ID_TICKET;
	COMMIT;
	DBMS_OUTPUT.PUT_LINE('Proceso OK');
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('ERROR DE CODIGO: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

END PK_RESUMEN;
/

SET SERVEROUTPUT ON;

--SELECT
CALL PK_RESUMEN.LISTAR_PASAJEROS();

--INSERTAR

EXEC PK_RESUMEN.NEW_PAS('70993358', 'Kelvin', 'Flores', 23, 'M', '982301593', 'kkristhofer@gmail.com', 101);


--ACTULIZAR

EXEC PK_RESUMEN.SP_ACTU_ASIENTO('75914717', 50);

--ELIMINAR

EXEC PK_RESUMEN.SP_DEL_PAS(1000);