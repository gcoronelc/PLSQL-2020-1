create or replace package body SIGDOC_USUARIO_tapi
is
V_FECHA_ACTUAL DATE;
V_REGISTRO NUMBER := 1;
CRYPT_RAW   RAW(2000);
CRYPT_STR   VARCHAR(2000);
V_CLAVE VARCHAR2(50 BYTE);
-- LLAVE DE ENCRIPCION
KEY_ENCRIP  VARCHAR(255):='ASXRFGTR';

-- INSERT
	PROCEDURE SP_CREATE_USUARIO(
		P_ID_USUARIO 		   IN SIGDOC_USUARIO.ID_USUARIO %TYPE DEFAULT NULL,
        P_ID_CLIENTE 		   IN SIGDOC_USUARIO.ID_CLIENTE%TYPE DEFAULT NULL,
		P_ID_UNIDAD 		   IN SIGDOC_USUARIO.ID_UNIDAD%TYPE,
		P_CORREO 			   IN SIGDOC_USUARIO.CORREO%TYPE DEFAULT NULL,
		P_USUARIO 			   IN SIGDOC_USUARIO.USUARIO%TYPE,
		P_CLAVE 			   IN SIGDOC_USUARIO.CLAVE%TYPE DEFAULT NULL,
        P_ES_REGISTRO          IN SIGDOC_USUARIO.FECHA_CREACION%TYPE DEFAULT NULL,
        P_FECHA_CREACION       IN SIGDOC_USUARIO.ES_REGISTRO%TYPE DEFAULT NULL,
		P_USUARIO_CREACION     IN SIGDOC_USUARIO.USUARIO_CREACION%TYPE DEFAULT NULL, 
		P_COD_RESPUESTA OUT  NUMBER,
		P_MENSAJE OUT       VARCHAR2
	) 
IS	
    V_ID_USUARIO NUMBER;
	V_EXISTE_USUARIO NUMBER;
BEGIN
    SELECT COUNT(ID_USUARIO)
	INTO V_EXISTE_USUARIO
	FROM SIGDOC_USUARIO
	WHERE USUARIO  = P_USUARIO;
	IF (V_EXISTE_USUARIO > 0) THEN
		P_COD_RESPUESTA := 1;
        P_MENSAJE       := 'YA ESTAN USANDO EL MISMO NOMBRE DE USUARIO';
	END IF;
    SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY') INTO V_FECHA_ACTUAL FROM DUAL;
	SELECT FN_ENCRIPTAR(P_CLAVE) INTO V_CLAVE FROM DUAL;
    IF (V_EXISTE_USUARIO = 0) THEN

	INSERT INTO SIGDOC_USUARIO(
		ID_USUARIO,
		ID_CLIENTE,
		ID_UNIDAD,
		CORREO,
		USUARIO,
		CLAVE,
		ES_REGISTRO,
        FECHA_CREACION,
		USUARIO_CREACION) 
        VALUES (
		P_ID_USUARIO,
		P_ID_CLIENTE, 		   
		P_ID_UNIDAD, 		   
		P_CORREO, 			   
		P_USUARIO, 			   
		V_CLAVE, 			   
		P_ES_REGISTRO,
        V_FECHA_ACTUAL,
		P_USUARIO_CREACION     
    );
    COMMIT;
    P_COD_RESPUESTA := 0;
    P_MENSAJE       := 'USUARIO REGISTRADO';
    END IF;
EXCEPTION
WHEN OTHERS THEN
  P_COD_RESPUESTA := -1;
  P_MENSAJE       := TO_CHAR(SQLCODE) || ' - ' || SQLERRM;
  ROLLBACK;
END;

-- update
procedure SP_UPDATE_USUARIO(
        P_ID_USUARIO 		   IN SIGDOC_USUARIO.ID_USUARIO %TYPE DEFAULT NULL,
		P_ID_UNIDAD 		   IN SIGDOC_USUARIO.ID_UNIDAD%TYPE,
		P_CORREO 			   IN SIGDOC_USUARIO.CORREO%TYPE DEFAULT NULL,
		P_USUARIO 			   IN SIGDOC_USUARIO.USUARIO%TYPE,
		P_CLAVE 			   IN SIGDOC_USUARIO.CLAVE%TYPE DEFAULT NULL,
        P_FECHA_MODIFICACION       IN SIGDOC_USUARIO.FECHA_MODIFICACION%TYPE DEFAULT NULL,
		P_USUARIO_MODIFICACION     IN SIGDOC_USUARIO.USUARIO_MODIFICACION%TYPE DEFAULT NULL, 
		P_COD_RESPUESTA OUT  NUMBER,
		P_MENSAJE OUT       VARCHAR2
) is
    V_ID_USUARIO NUMBER;
	V_EXISTE_USUARIO NUMBER;
begin
    SELECT COUNT(ID_USUARIO)
	INTO V_EXISTE_USUARIO
	FROM SIGDOC_USUARIO
	WHERE ID_USUARIO  = P_ID_USUARIO;
	IF (V_EXISTE_USUARIO < 1) THEN
		P_COD_RESPUESTA := 1;
        P_MENSAJE       := 'USUARIO NO ESTA REGISTRADO';
    END IF;
    
    SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY') INTO V_FECHA_ACTUAL FROM DUAL;
	SELECT FN_ENCRIPTAR(P_CLAVE) INTO V_CLAVE FROM DUAL;
    IF (V_EXISTE_USUARIO > 0) THEN
    update SIGDOC_USUARIO set
        ID_UNIDAD = P_ID_UNIDAD, 		   
        CORREO = P_CORREO,			   
		USUARIO = P_USUARIO, 			   
		CLAVE = V_CLAVE, 			   
        FECHA_MODIFICACION = V_FECHA_ACTUAL,      
		USUARIO_MODIFICACION = P_USUARIO_MODIFICACION
    where ID_USUARIO = P_ID_USUARIO;
    commit;
    P_COD_RESPUESTA   := 0;
    P_MENSAJE         := 'SE ACTUALIZO CORRECTAMENTE EL USUARIO';
    END IF;
EXCEPTION
WHEN OTHERS THEN
  P_COD_RESPUESTA := -1;
  P_MENSAJE       := TO_CHAR(SQLCODE) || ' - ' || SQLERRM;
  ROLLBACK;
end;

-- ENCRIPTAR
FUNCTION FN_ENCRIPTAR( TXT_ENCRIP VARCHAR2 ) RETURN RAW AS
      L        INTEGER := LENGTH(TXT_ENCRIP);
      I        INTEGER;
      PADBLOCK RAW(2000);
      CLE      RAW(8)  := UTL_RAW.CAST_TO_RAW(KEY_ENCRIP);
BEGIN
      I := 8-MOD(L,8);
      PADBLOCK := UTL_RAW.CAST_TO_RAW(TXT_ENCRIP||RPAD(CHR(I),I,CHR(I)));
      DBMS_OBFUSCATION_TOOLKIT.DESENCRYPT(
               INPUT          => PADBLOCK,
               KEY            => CLE,
               ENCRYPTED_DATA => CRYPT_RAW );
      RETURN CRYPT_RAW ;
END;
    
--DESCENCRIPTAR    
FUNCTION FN_DESCENCRIPTAR( TXT_DESENCRIP VARCHAR2 ) RETURN VARCHAR2 AS
   L          NUMBER;
   CLE        RAW(8)    := UTL_RAW.CAST_TO_RAW(KEY_ENCRIP);
   CRYPT_RAW  RAW(2000) := UTL_RAW.CAST_TO_RAW(UTL_RAW.CAST_TO_VARCHAR2( TXT_DESENCRIP)) ;
   BEGIN
      DBMS_OBFUSCATION_TOOLKIT.DESDECRYPT(
               INPUT          =>  TXT_DESENCRIP,
               KEY            =>  CLE,
               DECRYPTED_DATA =>  CRYPT_RAW );
      CRYPT_STR := UTL_RAW.CAST_TO_VARCHAR2(CRYPT_RAW);
      L := LENGTH(CRYPT_STR);
      CRYPT_STR := RPAD(CRYPT_STR,L-ASCII(SUBSTR(CRYPT_STR,L)));
      RETURN CRYPT_STR;
   END;
--LEER UN REGISTRO
PROCEDURE SP_LEER_USUARIO(
    P_USUARIO IN SIGDOC_USUARIO.USUARIO%TYPE,
    P_CURSOR OUT NOCOPY SYS_REFCURSOR,
    P_COD_RESPUESTA OUT NUMBER,
    P_MENSAJE OUT  VARCHAR2 )
IS
  V_EXISTE_USUARIO NUMBER;
BEGIN
  SELECT COUNT(P_USUARIO)
  INTO V_EXISTE_USUARIO
  FROM SIGDOC_USUARIO
  WHERE USUARIO  = P_USUARIO;
  IF (V_EXISTE_USUARIO = 0) THEN
    P_COD_RESPUESTA         := 1;
    P_MENSAJE               := 'NO SE ENCUENTRA REGISTRADO EL USUARIO';
  END IF;
  IF(V_EXISTE_USUARIO = 1) THEN
  OPEN P_CURSOR FOR SELECT ID_USUARIO,
		ID_CLIENTE, 		   
		ID_UNIDAD, 		   
		CORREO, 			   
		USUARIO, 			   
		CLAVE, 			   
		ES_REGISTRO,
        USUARIO_CREACION,
        FECHA_CREACION,
        usuario_modificacion,
        fecha_modificacion
  FROM SIGDOC_USUARIO WHERE USUARIO = P_USUARIO;
  P_COD_RESPUESTA                 := 0;
  P_MENSAJE                       := 'SE ENCONTRÓ USUARIO';
  END IF;
  
EXCEPTION
WHEN OTHERS THEN
  P_COD_RESPUESTA := -1;
  P_MENSAJE       := TO_CHAR(SQLCODE) || ' - ' || SQLERRM;
END SP_LEER_USUARIO;

-- eliminar
procedure SP_DELETE_USUARIO(
        p_ID_USUARIO IN SIGDOC_USUARIO.ID_USUARIO%type,
        P_ES_REGISTRO          IN SIGDOC_USUARIO.ES_REGISTRO%TYPE DEFAULT NULL,
        P_FECHA_MODIFICACION       IN SIGDOC_USUARIO.FECHA_MODIFICACION%TYPE DEFAULT NULL,
		P_USUARIO_MODIFICACION     IN SIGDOC_USUARIO.USUARIO_MODIFICACION%TYPE DEFAULT NULL,
        P_COD_RESPUESTA OUT NUMBER,
        P_MENSAJE OUT  VARCHAR2
) is
	V_ID_USUARIO NUMBER;
    V_EXISTE_USUARIO NUMBER;
begin
    SELECT COUNT(ID_USUARIO)
	INTO V_EXISTE_USUARIO
	FROM SIGDOC_USUARIO
	WHERE ID_USUARIO  = P_ID_USUARIO;
	IF (V_EXISTE_USUARIO < 1) THEN
		P_COD_RESPUESTA := 1;
        P_MENSAJE       := 'USUARIO NO ESTA REGISTRADO';
    END IF;
    
    SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY') INTO V_FECHA_ACTUAL FROM DUAL;
    
    IF (V_EXISTE_USUARIO > 0) THEN
    update SIGDOC_USUARIO set
        ES_REGISTRO = 0, 		   		   
        FECHA_MODIFICACION = V_FECHA_ACTUAL,      
		USUARIO_MODIFICACION = P_USUARIO_MODIFICACION
    where ID_USUARIO = P_ID_USUARIO;
    COMMIT;
    P_COD_RESPUESTA    := 0;
    P_MENSAJE          := 'SE CAMBIO EL ESTADO LOGICO';
    END IF;
EXCEPTION
WHEN OTHERS THEN
  P_COD_RESPUESTA := -1;
  P_MENSAJE       := TO_CHAR(SQLCODE) || ' - ' || SQLERRM;
  ROLLBACK;
end;
end SIGDOC_USUARIO_tapi;
